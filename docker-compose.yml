version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: ${POSTGRES_DB:-repliq}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-repliq}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      URL: ${URL:-:8000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      DB_URL: ${DB_URL:-postgresql://admin:admin@db:5432/repliq?sslmode=disable}
      JWT_SECRET: ${JWT_SECRET:-youcantjustdecodets}
      RATELIMITER_REQ_COUNT: ${RATELIMITER_REQ_COUNT:-100}
      RATELIMITER_BURST: ${RATELIMITER_BURST:-20}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN:-http://localhost:5173}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_BACKEND_URL: ${VITE_BACKEND_URL:-http://localhost:8000/v1}
    container_name: frontend
    ports:
      - "5173:80"
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL:-http://localhost:8000/v1}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
